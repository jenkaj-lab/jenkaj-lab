---
title: Detecting and Mitigating Active Directory LDAP Password Guessing Attacks with Elastic Stack
date: 2025-01-26
draft: false
author: Alex Jenkins
---
# Blue Team
## Assumptions
1. Wazuh is configured and listening to AD logs

## Detection
Able to look through the logs to see failures with bad passwords.


- Monitor for many failed authentication attempts

## Mitigation
### Account Use Policies
- Account lockout (can be bad, creating a sort of DoS if policies are too strict with all accounts targeted in the brute force being locked out)
- Conditional access to block untrusted/unmanaged/non-compliant devices or from outside defined IP range

### Multi-Factor Authentication
Multi-Factor Authentication (MFA) is one of the best options for validating a login. 
- show how

### Password Policies
Yes, the things that we disabled. These can be re-applied to add a stronger layer of protection to password guessing attacks.

Refer to NIST guidelines

---

1. Navigate to Explore/Discover in Wazuh
2. Add a filter for 'data.win.eventdata.targetUserName: scarab'
3. Filter for the last hour

After running the ldap_brute_forcer.py script we can see from the logs that there are 9 authentication failures, and one success. This lines up perfectly with the rockyou.txt wordlist, and is showing exactly as expected.
Digging into these failed logins further the following key data can be seen:

data.win.eventdata.status: 0xc000006d
data.win.eventdata.subStatus: 0xc000006a
data.win.eventdata.targetUserName: scarab
data.win.eventdata.ipAddress: 192.168.1.236

This information is important because it describes login failures through the status and substatus codes, and gives information regarding the source IP address of the login failure and the account the logon was attempted for.
0xc000006d is the generic code for a logon failure, stating the the attempted logon is invalid. This is either due to a bad username or other authentication information.
0xc000006a is a substatus of 0xc000006d and gives more information. In this case it explains that the value provided as the current password is not correct.

The information found above can be used to help us create a detection rule.

The 10th and final event resulting from the brute force script is a logoff.

This is a little strange because I was expecting a logon success code, but this appears to be a caveat of ldapsearch and bind because it hasn't provided a full authentication.
To find out more about this event I grabbed the data.win.system.eventID. This is 4634 in this case.

learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4634

To summarize: This event shows that the logon session was terminate and no longer exists. This code differs from 4647, which is a user initiated logoff. This event is sometimes correlated with 4624, which indicates a successful logon.

If I was investigating this in a real brute force case I would be suspicious of the failed logins followed by a terminated logon session without a correlated logon success. This LDAP brute forcer has managed to successfully guess password credentials and terminated the logon session immediately after doing so. This is evident from the logs. This is key information because it can help differentiate between a normal successful logon where the user has simply entered their password incorrectly before logging in.

Another important indicator for brute force is the timestamps. The difference in events are milliseconds apart, far too frequent to be human error and indicative of a computer-aided operation.



# Detection Rule

In Wazuh, navigate to Explore/Alerting -> Monitors tab -> Create monitor

Monitor Name: LDAP Brute Force
Monitor Type: Per query monitor
Monitor defining method: Visual editor
Frequency: By interval
Run every: 30 mins

Obviously the frequency is up to you, I like to be reminded every hour of an alert until it's acknowledged

Indexes: *
Time field: timestamp 

* is a wildcard and uses all indexes 

Metrics: COUNT OF data.win.eventdata.subStatus
Time range for the last 30 mins

Filter on:
data.win.eventdata.status is 0xc000006d
data.win.eventdata.subStatus is 0xc000006a

Group by data.win.eventdata.ipAddress

Trigger:
Name: Failure Threshold 
Severity Level: 3 (Medium)
Trigger condition: IS ABOVE 5

Action:
Name: Alert to Slack
Channel: [Channel] Slack Alerts
Everything else default

Finished.

Okay that's good, we can check to see if it works by running the brute force script again. Because this is set to run every 30 mins and check the last 30 mins it will take a bit of time to trigger the alert, so if you want that sooner you can run it every minute. I've thought about how often I want this to run, every hour seems too long because an adversary will already have access to the network and response time needs to be quick.

That's the detection rule setup, but what about mitigation?

So MITRE explains that there are 4 ways of doing this, and the simplest seems to be password policies. Obviously for this practice we made the password policy intentionally weak so the simple solution would be to increase password length and complexity. Other methods include enforcing MFA on AD accounts, this is always a good method and in my opinion should be mandatory for all users as single factor authentication methods are inherently weak and vulnerable to brute force attacks. Another useful method is to set account lockout policies, whereby the account would become unusable if a threshold of failed login attempts is reached. In this case that's not really suitable because the password was guessed after a low number of logins and enforcing lockouts on such a low number of failures would be inconvenient for the user. Another method is to restrict access to geographical zones, only allow logins from specific IPs, or to block IP addresses outright if found to be malicious. Whilst these last 3 methods would be beneficial, I will not be doing this because it will hinder my ability to perform any future red team assessments.

Working with a local AD environment it's a bit more dificult to enforce MFA than it's worth doing for a lab because it will need third party providers.

Just for this time I will be enforcing account lockout, as it is the simplest defence against brute force. The way this is configured is to lockout the account for 30 minutes, resetting the counter after 30 mins, and setting the account lockout threshold to 5 invalid logon attempts. These cahnges can be made in the Group Policy Management Editor under Computer Configuration/Policies/Windows Settings/Security Settings/Account Policies/Account Lockout Policy.

